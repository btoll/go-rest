// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "nmgapi": Sport Resource Client
//
// Command:
// $ goagen
// --design=github.com/btoll/rest-go/design
// --out=$(GOPATH)/src/github.com/btoll/rest-go
// --regen=true
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateSportPath computes a request path to the create action of Sport.
func CreateSportPath() string {

	return fmt.Sprintf("/nmg/sport/")
}

// Create a new sport.
func (c *Client) CreateSport(ctx context.Context, path string, payload *SportPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateSportRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateSportRequest create the request corresponding to the create action endpoint of the Sport resource.
func (c *Client) NewCreateSportRequest(ctx context.Context, path string, payload *SportPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteSportPath computes a request path to the delete action of Sport.
func DeleteSportPath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/sport/%s", param0)
}

// Delete a sport by id.
func (c *Client) DeleteSport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteSportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteSportRequest create the request corresponding to the delete action endpoint of the Sport resource.
func (c *Client) NewDeleteSportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSportPath computes a request path to the list action of Sport.
func ListSportPath() string {

	return fmt.Sprintf("/nmg/sport/list")
}

// Get all sports
func (c *Client) ListSport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSportRequest create the request corresponding to the list action endpoint of the Sport resource.
func (c *Client) NewListSportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowSportPath computes a request path to the show action of Sport.
func ShowSportPath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/sport/%s", param0)
}

// Get a sport by id.
func (c *Client) ShowSport(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowSportRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowSportRequest create the request corresponding to the show action endpoint of the Sport resource.
func (c *Client) NewShowSportRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateSportPath computes a request path to the update action of Sport.
func UpdateSportPath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/sport/%s", param0)
}

// Update a sport by id.
func (c *Client) UpdateSport(ctx context.Context, path string, payload *SportPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateSportRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateSportRequest create the request corresponding to the update action endpoint of the Sport resource.
func (c *Client) NewUpdateSportRequest(ctx context.Context, path string, payload *SportPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

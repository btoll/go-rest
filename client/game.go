// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "nmgapi": Game Resource Client
//
// Command:
// $ goagen
// --design=github.com/btoll/rest-go/design
// --out=$(GOPATH)/src/github.com/btoll/rest-go
// --regen=true
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateGamePath computes a request path to the create action of Game.
func CreateGamePath() string {

	return fmt.Sprintf("/nmg/game/")
}

// Create a new game.
func (c *Client) CreateGame(ctx context.Context, path string, payload *GamePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateGameRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateGameRequest create the request corresponding to the create action endpoint of the Game resource.
func (c *Client) NewCreateGameRequest(ctx context.Context, path string, payload *GamePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteGamePath computes a request path to the delete action of Game.
func DeleteGamePath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/game/%s", param0)
}

// Delete a game by id.
func (c *Client) DeleteGame(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteGameRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteGameRequest create the request corresponding to the delete action endpoint of the Game resource.
func (c *Client) NewDeleteGameRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListGamePath computes a request path to the list action of Game.
func ListGamePath() string {

	return fmt.Sprintf("/nmg/game/list")
}

// Get all games
func (c *Client) ListGame(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListGameRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListGameRequest create the request corresponding to the list action endpoint of the Game resource.
func (c *Client) NewListGameRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowGamePath computes a request path to the show action of Game.
func ShowGamePath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/game/%s", param0)
}

// Get a game by id.
func (c *Client) ShowGame(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowGameRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowGameRequest create the request corresponding to the show action endpoint of the Game resource.
func (c *Client) NewShowGameRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateGamePath computes a request path to the update action of Game.
func UpdateGamePath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/game/%s", param0)
}

// Update a game by id.
func (c *Client) UpdateGame(ctx context.Context, path string, payload *GamePayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateGameRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateGameRequest create the request corresponding to the update action endpoint of the Game resource.
func (c *Client) NewUpdateGameRequest(ctx context.Context, path string, payload *GamePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

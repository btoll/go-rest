// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "nmgapi": TeamOpeningConfig Resource Client
//
// Command:
// $ goagen
// --design=github.com/dgaedcke/nmg_admin_service/design
// --out=$(GOPATH)/src/github.com/dgaedcke/nmg_admin_service
// --regen=true
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateTeamOpeningConfigPath computes a request path to the create action of TeamOpeningConfig.
func CreateTeamOpeningConfigPath() string {

	return fmt.Sprintf("/nmg/teamOpeningConfig/")
}

// Create a new team opening config.
func (c *Client) CreateTeamOpeningConfig(ctx context.Context, path string, payload *TeamOpeningConfigPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateTeamOpeningConfigRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTeamOpeningConfigRequest create the request corresponding to the create action endpoint of the TeamOpeningConfig resource.
func (c *Client) NewCreateTeamOpeningConfigRequest(ctx context.Context, path string, payload *TeamOpeningConfigPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteTeamOpeningConfigPath computes a request path to the delete action of TeamOpeningConfig.
func DeleteTeamOpeningConfigPath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/teamOpeningConfig/%s", param0)
}

// Delete a sports team by event key.
func (c *Client) DeleteTeamOpeningConfig(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteTeamOpeningConfigRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTeamOpeningConfigRequest create the request corresponding to the delete action endpoint of the TeamOpeningConfig resource.
func (c *Client) NewDeleteTeamOpeningConfigRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListTeamOpeningConfigPath computes a request path to the list action of TeamOpeningConfig.
func ListTeamOpeningConfigPath() string {

	return fmt.Sprintf("/nmg/teamOpeningConfig/list")
}

// Get all teams openings
func (c *Client) ListTeamOpeningConfig(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTeamOpeningConfigRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTeamOpeningConfigRequest create the request corresponding to the list action endpoint of the TeamOpeningConfig resource.
func (c *Client) NewListTeamOpeningConfigRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowTeamOpeningConfigPath computes a request path to the show action of TeamOpeningConfig.
func ShowTeamOpeningConfigPath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/teamOpeningConfig/%s", param0)
}

// Get a sports team by event key.
func (c *Client) ShowTeamOpeningConfig(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowTeamOpeningConfigRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowTeamOpeningConfigRequest create the request corresponding to the show action endpoint of the TeamOpeningConfig resource.
func (c *Client) NewShowTeamOpeningConfigRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateTeamOpeningConfigPath computes a request path to the update action of TeamOpeningConfig.
func UpdateTeamOpeningConfigPath(id string) string {
	param0 := id

	return fmt.Sprintf("/nmg/teamOpeningConfig/%s", param0)
}

// Update a sports team by event key.
func (c *Client) UpdateTeamOpeningConfig(ctx context.Context, path string, payload *TeamOpeningConfigPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateTeamOpeningConfigRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateTeamOpeningConfigRequest create the request corresponding to the update action endpoint of the TeamOpeningConfig resource.
func (c *Client) NewUpdateTeamOpeningConfigRequest(ctx context.Context, path string, payload *TeamOpeningConfigPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

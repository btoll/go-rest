// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "nmgapi": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/btoll/rest-go/design
// --out=$(GOPATH)/src/github.com/btoll/rest-go
// --regen=true
// --version=v1.3.0

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/btoll/rest-go/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateEventCommand is the command line data structure for the create action of Event
	CreateEventCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteEventCommand is the command line data structure for the delete action of Event
	DeleteEventCommand struct {
		// Event ID
		ID          string
		PrettyPrint bool
	}

	// ListEventCommand is the command line data structure for the list action of Event
	ListEventCommand struct {
		PrettyPrint bool
	}

	// ShowEventCommand is the command line data structure for the show action of Event
	ShowEventCommand struct {
		// Event ID
		ID          string
		PrettyPrint bool
	}

	// UpdateEventCommand is the command line data structure for the update action of Event
	UpdateEventCommand struct {
		Payload     string
		ContentType string
		// Event ID
		ID          string
		PrettyPrint bool
	}

	// CreateGameCommand is the command line data structure for the create action of Game
	CreateGameCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteGameCommand is the command line data structure for the delete action of Game
	DeleteGameCommand struct {
		// Game ID
		ID          string
		PrettyPrint bool
	}

	// ListGameCommand is the command line data structure for the list action of Game
	ListGameCommand struct {
		PrettyPrint bool
	}

	// ShowGameCommand is the command line data structure for the show action of Game
	ShowGameCommand struct {
		// Game ID
		ID          string
		PrettyPrint bool
	}

	// UpdateGameCommand is the command line data structure for the update action of Game
	UpdateGameCommand struct {
		Payload     string
		ContentType string
		// Game ID
		ID          string
		PrettyPrint bool
	}

	// CreateSportCommand is the command line data structure for the create action of Sport
	CreateSportCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteSportCommand is the command line data structure for the delete action of Sport
	DeleteSportCommand struct {
		// Sport ID
		ID          string
		PrettyPrint bool
	}

	// ListSportCommand is the command line data structure for the list action of Sport
	ListSportCommand struct {
		PrettyPrint bool
	}

	// ShowSportCommand is the command line data structure for the show action of Sport
	ShowSportCommand struct {
		// Sport ID
		ID          string
		PrettyPrint bool
	}

	// UpdateSportCommand is the command line data structure for the update action of Sport
	UpdateSportCommand struct {
		Payload     string
		ContentType string
		// Sport ID
		ID          string
		PrettyPrint bool
	}

	// CreateTeamCommand is the command line data structure for the create action of Team
	CreateTeamCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteTeamCommand is the command line data structure for the delete action of Team
	DeleteTeamCommand struct {
		// Team ID
		ID          string
		PrettyPrint bool
	}

	// ListTeamCommand is the command line data structure for the list action of Team
	ListTeamCommand struct {
		PrettyPrint bool
	}

	// ShowTeamCommand is the command line data structure for the show action of Team
	ShowTeamCommand struct {
		// Team ID
		ID          string
		PrettyPrint bool
	}

	// UpdateTeamCommand is the command line data structure for the update action of Team
	UpdateTeamCommand struct {
		Payload     string
		ContentType string
		// Team ID
		ID          string
		PrettyPrint bool
	}

	// CreateTeamOpeningConfigCommand is the command line data structure for the create action of TeamOpeningConfig
	CreateTeamOpeningConfigCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteTeamOpeningConfigCommand is the command line data structure for the delete action of TeamOpeningConfig
	DeleteTeamOpeningConfigCommand struct {
		// Team Game Event Key
		ID          string
		PrettyPrint bool
	}

	// ListTeamOpeningConfigCommand is the command line data structure for the list action of TeamOpeningConfig
	ListTeamOpeningConfigCommand struct {
		PrettyPrint bool
	}

	// ShowTeamOpeningConfigCommand is the command line data structure for the show action of TeamOpeningConfig
	ShowTeamOpeningConfigCommand struct {
		// Team Game Event Key
		ID          string
		PrettyPrint bool
	}

	// UpdateTeamOpeningConfigCommand is the command line data structure for the update action of TeamOpeningConfig
	UpdateTeamOpeningConfigCommand struct {
		Payload     string
		ContentType string
		// Team Game Event Key
		ID          string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp1 := new(CreateEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/nmg/event/"]`,
		Short: `Describes a sport event.`,
		Long: `Describes a sport event.

Payload example:

{
   "endDtTm": "1976-12-29T12:27:59Z",
   "eventId": "Ad qui laborum aliquam vel nobis.",
   "locationId": "Voluptatem dolores sit ut quis necessitatibus non.",
   "name": "Est delectus.",
   "sportId": "Quis aut ut labore perferendis natus quidem.",
   "startDtTm": "2007-08-16T16:19:15Z",
   "subTitle": "Maiores voluptatem voluptatem ad earum.",
   "teamAdvanceMethod": "Porro vel quia quaerat."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(CreateGameCommand)
	sub = &cobra.Command{
		Use:   `game ["/nmg/game/"]`,
		Short: `Describes a game.`,
		Long: `Describes a game.

Payload example:

{
   "eventId": "Dicta mollitia et nulla eos nobis id.",
   "externalId": "Quo iusto voluptatem eos est quo molestias.",
   "favTeamId": "Accusamus aut perferendis eos vel assumenda.",
   "finishedAtDtTm": "1992-03-19T05:10:10Z",
   "gameStatus": "Minima officiis quas voluptatem.",
   "location": "Quos quaerat atque et est deleniti maiores.",
   "locationId": "Eum neque quibusdam.",
   "loserProgressStatus": "Quos pariatur explicabo ullam quam sed accusantium.",
   "oddsForFav": 0.34067773420665565,
   "playDtTm": "1979-02-27T12:04:56Z",
   "sportId": "Ut suscipit iusto eos et ut.",
   "title": "Est a tempora.",
   "underTeamId": "Consequatur id.",
   "winnerTeamId": "Quidem ut ea unde excepturi minima voluptas."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(CreateSportCommand)
	sub = &cobra.Command{
		Use:   `sport ["/nmg/sport/"]`,
		Short: `Describes a sport.`,
		Long: `Describes a sport.

Payload example:

{
   "active": true,
   "backgroundImageName": "Molestias aut.",
   "eventTerm": "Vitae consequatur corrupti tempora.",
   "gameTerm": "Est et veritatis non.",
   "iconName": "Id error non ipsa aut facilis.",
   "maxPreSplitPrice": 0.2517721518449465,
   "name": "Impedit ex qui ad suscipit in."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(CreateTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/nmg/team/"]`,
		Short: `Describes a sport team.`,
		Long: `Describes a sport team.

Payload example:

{
   "currentWinRecord": "Laborum veniam explicabo quo fuga fugiat.",
   "fullLogo": "Veritatis explicabo ullam cupiditate.",
   "homeTownId": "Delectus repellendus enim.",
   "iconName": "Qui reiciendis dolorem accusamus perspiciatis.",
   "id": "Voluptas occaecati non.",
   "name": "Enim laborum.",
   "shortName": "Esse voluptatem.",
   "sportId": "Est ut eum qui voluptatem voluptas illo."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp5 := new(CreateTeamOpeningConfigCommand)
	sub = &cobra.Command{
		Use:   `team-opening-config ["/nmg/teamOpeningConfig/"]`,
		Short: `Describes a team opening config.`,
		Long: `Describes a team opening config.

Payload example:

{
   "buyIncrementPrice": 0.025119607650842632,
   "buyIncrementQuan": 416724351,
   "liquidationFee": 0.5452225039240716,
   "openingPrice": 0.12163531910962996,
   "openingShares": 75184129,
   "sellDecrementPrice": 0.8437592135488748,
   "sellDecrementQuan": 676987286,
   "startTradeDtTm": "1980-12-03T22:48:01Z"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp6 := new(DeleteEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/nmg/event/ID"]`,
		Short: `Describes a sport event.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(DeleteGameCommand)
	sub = &cobra.Command{
		Use:   `game ["/nmg/game/ID"]`,
		Short: `Describes a game.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(DeleteSportCommand)
	sub = &cobra.Command{
		Use:   `sport ["/nmg/sport/ID"]`,
		Short: `Describes a sport.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(DeleteTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/nmg/team/ID"]`,
		Short: `Describes a sport team.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(DeleteTeamOpeningConfigCommand)
	sub = &cobra.Command{
		Use:   `team-opening-config ["/nmg/teamOpeningConfig/ID"]`,
		Short: `Describes a team opening config.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp11 := new(ListEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/nmg/event/list"]`,
		Short: `Describes a sport event.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp12 := new(ListGameCommand)
	sub = &cobra.Command{
		Use:   `game ["/nmg/game/list"]`,
		Short: `Describes a game.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp13 := new(ListSportCommand)
	sub = &cobra.Command{
		Use:   `sport ["/nmg/sport/list"]`,
		Short: `Describes a sport.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp14 := new(ListTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/nmg/team/list"]`,
		Short: `Describes a sport team.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp15 := new(ListTeamOpeningConfigCommand)
	sub = &cobra.Command{
		Use:   `team-opening-config ["/nmg/teamOpeningConfig/list"]`,
		Short: `Describes a team opening config.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp16 := new(ShowEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/nmg/event/ID"]`,
		Short: `Describes a sport event.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp17 := new(ShowGameCommand)
	sub = &cobra.Command{
		Use:   `game ["/nmg/game/ID"]`,
		Short: `Describes a game.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp18 := new(ShowSportCommand)
	sub = &cobra.Command{
		Use:   `sport ["/nmg/sport/ID"]`,
		Short: `Describes a sport.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp19 := new(ShowTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/nmg/team/ID"]`,
		Short: `Describes a sport team.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp20 := new(ShowTeamOpeningConfigCommand)
	sub = &cobra.Command{
		Use:   `team-opening-config ["/nmg/teamOpeningConfig/ID"]`,
		Short: `Describes a team opening config.`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp21 := new(UpdateEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/nmg/event/ID"]`,
		Short: `Describes a sport event.`,
		Long: `Describes a sport event.

Payload example:

{
   "endDtTm": "1976-12-29T12:27:59Z",
   "eventId": "Ad qui laborum aliquam vel nobis.",
   "locationId": "Voluptatem dolores sit ut quis necessitatibus non.",
   "name": "Est delectus.",
   "sportId": "Quis aut ut labore perferendis natus quidem.",
   "startDtTm": "2007-08-16T16:19:15Z",
   "subTitle": "Maiores voluptatem voluptatem ad earum.",
   "teamAdvanceMethod": "Porro vel quia quaerat."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp22 := new(UpdateGameCommand)
	sub = &cobra.Command{
		Use:   `game ["/nmg/game/ID"]`,
		Short: `Describes a game.`,
		Long: `Describes a game.

Payload example:

{
   "eventId": "Dicta mollitia et nulla eos nobis id.",
   "externalId": "Quo iusto voluptatem eos est quo molestias.",
   "favTeamId": "Accusamus aut perferendis eos vel assumenda.",
   "finishedAtDtTm": "1992-03-19T05:10:10Z",
   "gameStatus": "Minima officiis quas voluptatem.",
   "location": "Quos quaerat atque et est deleniti maiores.",
   "locationId": "Eum neque quibusdam.",
   "loserProgressStatus": "Quos pariatur explicabo ullam quam sed accusantium.",
   "oddsForFav": 0.34067773420665565,
   "playDtTm": "1979-02-27T12:04:56Z",
   "sportId": "Ut suscipit iusto eos et ut.",
   "title": "Est a tempora.",
   "underTeamId": "Consequatur id.",
   "winnerTeamId": "Quidem ut ea unde excepturi minima voluptas."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp23 := new(UpdateSportCommand)
	sub = &cobra.Command{
		Use:   `sport ["/nmg/sport/ID"]`,
		Short: `Describes a sport.`,
		Long: `Describes a sport.

Payload example:

{
   "active": true,
   "backgroundImageName": "Molestias aut.",
   "eventTerm": "Vitae consequatur corrupti tempora.",
   "gameTerm": "Est et veritatis non.",
   "iconName": "Id error non ipsa aut facilis.",
   "maxPreSplitPrice": 0.2517721518449465,
   "name": "Impedit ex qui ad suscipit in."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp24 := new(UpdateTeamCommand)
	sub = &cobra.Command{
		Use:   `team ["/nmg/team/ID"]`,
		Short: `Describes a sport team.`,
		Long: `Describes a sport team.

Payload example:

{
   "currentWinRecord": "Laborum veniam explicabo quo fuga fugiat.",
   "fullLogo": "Veritatis explicabo ullam cupiditate.",
   "homeTownId": "Delectus repellendus enim.",
   "iconName": "Qui reiciendis dolorem accusamus perspiciatis.",
   "id": "Voluptas occaecati non.",
   "name": "Enim laborum.",
   "shortName": "Esse voluptatem.",
   "sportId": "Est ut eum qui voluptatem voluptas illo."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp25 := new(UpdateTeamOpeningConfigCommand)
	sub = &cobra.Command{
		Use:   `team-opening-config ["/nmg/teamOpeningConfig/ID"]`,
		Short: `Describes a team opening config.`,
		Long: `Describes a team opening config.

Payload example:

{
   "buyIncrementPrice": 0.025119607650842632,
   "buyIncrementQuan": 416724351,
   "liquidationFee": 0.5452225039240716,
   "openingPrice": 0.12163531910962996,
   "openingShares": 75184129,
   "sellDecrementPrice": 0.8437592135488748,
   "sellDecrementQuan": 676987286,
   "startTradeDtTm": "1980-12-03T22:48:01Z"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreateEventCommand command.
func (cmd *CreateEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/event/"
	}
	var payload client.EventPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateEvent(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteEventCommand command.
func (cmd *DeleteEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/event/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteEvent(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Event ID`)
}

// Run makes the HTTP request corresponding to the ListEventCommand command.
func (cmd *ListEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/event/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListEvent(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowEventCommand command.
func (cmd *ShowEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/event/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowEvent(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Event ID`)
}

// Run makes the HTTP request corresponding to the UpdateEventCommand command.
func (cmd *UpdateEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/event/%v", url.QueryEscape(cmd.ID))
	}
	var payload client.EventPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateEvent(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Event ID`)
}

// Run makes the HTTP request corresponding to the CreateGameCommand command.
func (cmd *CreateGameCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/game/"
	}
	var payload client.GamePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateGame(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateGameCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteGameCommand command.
func (cmd *DeleteGameCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/game/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteGame(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteGameCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Game ID`)
}

// Run makes the HTTP request corresponding to the ListGameCommand command.
func (cmd *ListGameCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/game/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListGame(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListGameCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowGameCommand command.
func (cmd *ShowGameCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/game/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowGame(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowGameCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Game ID`)
}

// Run makes the HTTP request corresponding to the UpdateGameCommand command.
func (cmd *UpdateGameCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/game/%v", url.QueryEscape(cmd.ID))
	}
	var payload client.GamePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateGame(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateGameCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Game ID`)
}

// Run makes the HTTP request corresponding to the CreateSportCommand command.
func (cmd *CreateSportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/sport/"
	}
	var payload client.SportPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateSport(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateSportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteSportCommand command.
func (cmd *DeleteSportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/sport/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteSport(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteSportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Sport ID`)
}

// Run makes the HTTP request corresponding to the ListSportCommand command.
func (cmd *ListSportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/sport/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSport(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowSportCommand command.
func (cmd *ShowSportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/sport/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowSport(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowSportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Sport ID`)
}

// Run makes the HTTP request corresponding to the UpdateSportCommand command.
func (cmd *UpdateSportCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/sport/%v", url.QueryEscape(cmd.ID))
	}
	var payload client.SportPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSport(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSportCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Sport ID`)
}

// Run makes the HTTP request corresponding to the CreateTeamCommand command.
func (cmd *CreateTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/team/"
	}
	var payload client.TeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateTeam(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteTeamCommand command.
func (cmd *DeleteTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/team/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Team ID`)
}

// Run makes the HTTP request corresponding to the ListTeamCommand command.
func (cmd *ListTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/team/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowTeamCommand command.
func (cmd *ShowTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/team/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowTeam(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Team ID`)
}

// Run makes the HTTP request corresponding to the UpdateTeamCommand command.
func (cmd *UpdateTeamCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/team/%v", url.QueryEscape(cmd.ID))
	}
	var payload client.TeamPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateTeam(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateTeamCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Team ID`)
}

// Run makes the HTTP request corresponding to the CreateTeamOpeningConfigCommand command.
func (cmd *CreateTeamOpeningConfigCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/teamOpeningConfig/"
	}
	var payload client.TeamOpeningConfigPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateTeamOpeningConfig(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateTeamOpeningConfigCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteTeamOpeningConfigCommand command.
func (cmd *DeleteTeamOpeningConfigCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/teamOpeningConfig/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteTeamOpeningConfig(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteTeamOpeningConfigCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Team Game Event Key`)
}

// Run makes the HTTP request corresponding to the ListTeamOpeningConfigCommand command.
func (cmd *ListTeamOpeningConfigCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/nmg/teamOpeningConfig/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListTeamOpeningConfig(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListTeamOpeningConfigCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowTeamOpeningConfigCommand command.
func (cmd *ShowTeamOpeningConfigCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/teamOpeningConfig/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowTeamOpeningConfig(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowTeamOpeningConfigCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Team Game Event Key`)
}

// Run makes the HTTP request corresponding to the UpdateTeamOpeningConfigCommand command.
func (cmd *UpdateTeamOpeningConfigCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/nmg/teamOpeningConfig/%v", url.QueryEscape(cmd.ID))
	}
	var payload client.TeamOpeningConfigPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateTeamOpeningConfig(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateTeamOpeningConfigCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, `Team Game Event Key`)
}
